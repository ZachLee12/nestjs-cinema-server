// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstname String
  lastname  String
  age       Int
  birthday  DateTime
  username  String   @unique
  password  String

  likedMovies   Liked[]
  watchedMovies Watched[]
  userBooking   UserBooking[]
}

model Movie {
  id               String        @id @default(uuid())
  name             String        @unique
  description      String
  actors           String[]
  showtimes        String[]
  genres           String[]
  imgUrlHorizontal String?
  imgUrlVertical   String?
  likedByUsers     Liked[]
  watchedByUsers   Watched[]
  hall             Hall[]
  userBooking      UserBooking[]
}

model Liked {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId String

  @@id([userId, movieId])
}

model Watched {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId String

  @@id([userId, movieId])
}

model Hall {
  id            String        @id @default(uuid())
  movie         Movie         @relation(fields: [movieId], references: [id])
  movieId       String
  showtime      String
  hallSize      HallSize
  numberOfSeats Int
  userBooking   UserBooking[]

  @@unique([movieId, hallSize, showtime])
}

enum HallSize {
  BIG
  MEDIUM
  SMALL
}

model UserBooking {
  id          String @id @default(uuid())
  user        User   @relation(fields: [userId], references: [id])
  userId      String
  movie       Movie  @relation(fields: [movieId], references: [id])
  movieId     String
  seatsBooked Int[]
  hall        Hall   @relation(fields: [hallId], references: [id])
  hallId      String

  @@unique([userId, movieId, hallId])
}
